homes
homes_totalbaths
homes_totalbaths <- homes %>%
mutate(total_baths = fullbath + halfbath * 0.5) %>%
filter(total_baths > 4.5) %>%
select(hsdistrict, total_baths)
homes_totalbaths
homes %>%
filter(esdistrict == "Stone-Robinson" | esdistrict == "Cale") %>%
arrange(desc(totalvalue)) #desc order
homes %>%
group_by(esdistrict)
homes %>%
group_by(esdistrict) %>%
count()
homes %>%
group_by(hsdistrict) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE), # must remove NAs for summary stats
maxtotalvalue = max(totalvalue, na.rm = TRUE))
# group_by high school district and by middle school district
homes %>%
group_by(hsdistrict, condition) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE),
maxtotalvalue = max(totalvalue, na.rm = TRUE)) %>%
arrange(desc(medtotalvalue))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
library(here) # for a simple way to find your files
sort(tools::package_dependencies(package="tidyverse", recursive=TRUE)$tidyverse)
sort(tools::package_dependencies(package="dplyr", recursive=TRUE)$dplyr)
here()
homes <- read_csv(here("data", "raw", "albemarle_homes_2020.csv"))
View(homes)
# inspect the data
homes
# review columns names
names(homes)
#select all columns, change to upper case case
select_all(homes, toupper) #can also do tolower
#look, we haven't actually changed anything yet
names(homes)
# rename problematic column name
# use: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
#homes missing halfbath data
filter(homes, is.na(halfbath))
#homes not missing halfbath data
filter(homes, !is.na(halfbath))
# use mutate to log transform total value into a new numeric column and to compute new logical variable
homes <- homes %>%
mutate(logtotalvalue = log(totalvalue)) %>%
select(logtotalvalue, everything()) #puts new variable first
homes
#you will get an error
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice)) %>%
select(pricier, everything())
homes
homes %>%
group_by(esdistrict) %>%
count()
count(homes$esdistrict)
homes %>% count(esdistrict)
homes %>%
group_by(hsdistrict) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE), # must remove NAs for summary stats
maxtotalvalue = max(totalvalue, na.rm = TRUE))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
library(here) # for a simple way to find your files
homes <- read_csv(here("data", "raw", "albemarle_homes_2020.csv"))
# inspect the data
homes
# review columns names
names(homes)
#select all columns, change to upper case case
select_all(homes, toupper) #can also do tolower
#look, we haven't actually changed anything yet
names(homes)
# rename problematic column name
# use: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
# select three variables
select(homes, totalvalue, yearbuilt, finsqft)
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
# get a summary of dataset variables
summary(homes)
# review high school, middle school, and elementary school names first
distinct(homes, hsdistrict)
distinct(homes, msdistrict)
distinct(homes, esdistrict)
# Look at Stone-Robinson esdistrict homes only
filter(homes, esdistrict == "Stone-Robinson")
filter(homes, finsqft < 1000)
#homes missing halfbath data
filter(homes, is.na(halfbath))
#homes not missing halfbath data
filter(homes, !is.na(halfbath))
#look for max last sale price
arrange(homes, totalvalue)
arrange(homes, desc(totalvalue))
arrange(homes, finsqft)
here()
# select three variables
minihomes <- select(homes, totalvalue, yearbuilt, finsqft)
monticello <- filter(homes, hsdistrict == "Monticello")
monticello_intermediate <- select(monticello, totalvalue, age)
monticello_nest <- select(filter(homes, hsdistrict == "Monticello"), totalvalue, age)
monticello_pipe <- homes %>%
filter(hsdistrict == "Monticello") %>%
select(totalvalue, age)
west_alb <- homes %>%
filter(hsdistrict == "Western Albemarle") %>%
select(yearbuilt, totalrooms, condition)
west_alb
homes %>%
count(hsdistrict)
homes %>%
count(hsdistrict, sort = TRUE)
homes %>%
count(fullbath)
summary(homes$totalvalue)
# use mutate to log transform total value into a new numeric column and to compute new logical variable
homes <- homes %>%
mutate(logtotalvalue = log(totalvalue)) %>%
select(logtotalvalue, everything()) #puts new variable first
homes
#you will get an error
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice)) %>%
select(pricier, everything())
homes
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice, na.rm = TRUE)) %>%
select(pricier, everything())
homes
homes_totalbaths <- homes %>%
mutate(total_baths = fullbath + halfbath * 0.5) %>%
filter(total_baths > 4.5) %>%
select(hsdistrict, total_baths)
homes_totalbaths
homes %>%
filter(esdistrict == "Stone-Robinson" | esdistrict == "Cale") %>%
arrange(desc(totalvalue)) #desc order
homes %>%
filter(esdistrict %in% c("Stone-Robinson", "Cale")) %>%
arrange(-totalvalue) #desc order
homes %>%
filter(condition %in% c("Poor", "Substandard"))
homes %>%
group_by(esdistrict) %>%
count()
homes %>%
group_by(hsdistrict) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE), # must remove NAs for summary stats
maxtotalvalue = max(totalvalue, na.rm = TRUE))
# group_by high school district and by condition
homes %>%
group_by(hsdistrict, condition) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE),
maxtotalvalue = max(totalvalue, na.rm = TRUE)) %>%
arrange(desc(medtotalvalue))
homes %>%
group_by(msdistrict) %>%
summarise(meanbath = mean(fullbath, na.rm = TRUE),
maxbath = max(fullbath, na.rm = TRUE))
write_csv(homes, here("data", "processed", "albemarle_homes_2020_processed.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year"))
select(homes, ends_with("district"))
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
?distinct
distinct(homes, condition)
filter(homes, esdistrict == "Stone-Robinson" | esdistrict == "Cale")
filter(homes, esdistrict %in% c("Stone-Robinson", "Cale"))
filter(homes, is.na(halfbath)) # homes missing halfbath data
filter(homes, !is.na(halfbath)) # homes not missing halfbath data
filter(homes, is.na(halfbath)) # homes missing halfbath data
filter(homes, !is.na(halfbath)) # homes not missing halfbath data
homes %>%
count(hsdistrict)
count(homes, hsdistrict)
summary(homes$totalvalue)
# use mutate to log transform total value into a new numeric column and to compute new logical variable
homes <- homes %>%
mutate(logtotalvalue = log(totalvalue)) %>%
select(logtotalvalue, everything()) #puts new variable first
homes
#you will get an error
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice)) %>%
select(pricier, everything())
homes
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice, na.rm = TRUE)) %>%
select(pricier, everything())
homes
homes %>%
group_by(esdistrict) %>%
count()
homes %>%
group_by(esdistrict) %>%
n()
n(homes, totalvalue)
n?
?n
gf <- homes %>% group_by(hsdistrict)
gf
gf %>% summarize(n = n())
homes %>%
group_by(esdistrict) %>%
count()
count(homes, hsdistrict)
count(homes, hsdistrict, condition)
homes %>%
group_by(hsdistrict) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE))
homes %>%
filter(hsdistrict == "Unassigned")
homes %>%
filter(hsdistrict == "Unassigned") %>%
tally()
homes %>%
filter(hsdistrict != "Unassigned") %>%
tally()
# review columns names
names(homes)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
# alternative ways to preview the data
# View(homes)
# glimpse(homes)
# str(homes)
# head(homes)
# review columns names
names(homes)
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year")) # contains a word
select(homes, ends_with("district")) # ends with a word
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
# alternative ways to preview the data
# View(homes)
# glimpse(homes)
# str(homes)
# head(homes)
# review columns names
names(homes)
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year")) # contains a word
select(homes, ends_with("district")) # ends with a word
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
# get a summary of dataset variables
summary(homes)
# review high school, middle school, and elementary school names first
distinct(homes, hsdistrict)
distinct(homes, msdistrict)
distinct(homes, esdistrict)
# review high school, middle school, and elementary school names first
distinct(homes, hsdistrict, msdistrict)
distinct(homes, condition)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
# alternative ways to preview the data
# View(homes)
# glimpse(homes)
# str(homes)
# head(homes)
# review columns names
names(homes)
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year")) # contains a word
select(homes, ends_with("district")) # ends with a word
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
# get a summary of dataset variables
summary(homes)
# review high school, middle school, and elementary school names
distinct(homes, hsdistrict)
distinct(homes, msdistrict)
distinct(homes, esdistrict)
distinct(homes, condition)
filter(homes, esdistrict == "Stone-Robinson") # Look at Stone-Robinson esdistrict homes only
filter(homes, yearbuilt > 2011) # homes built after 2011
filter(homes, condition %in% c("Poor", "Substandard"))
filter(homes, finsqft < 1000)
filter(homes, is.na(totalrooms))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
# alternative ways to preview the data
# View(homes)
# glimpse(homes)
# str(homes)
# head(homes)
# review columns names
names(homes)
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year")) # contains a word
select(homes, ends_with("district")) # ends with a word
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
# get a summary of dataset variables
summary(homes)
# review high school, middle school, and elementary school names
distinct(homes, hsdistrict)
distinct(homes, msdistrict)
distinct(homes, esdistrict)
distinct(homes, condition)
filter(homes, esdistrict == "Stone-Robinson") # Look at Stone-Robinson esdistrict homes only
filter(homes, yearbuilt > 2011) # homes built after 2011
filter(homes, condition %in% c("Poor", "Substandard"))
filter(homes, finsqft < 1000)
filter(homes, is.na(halfbath)) # homes missing halfbath data
filter(homes, !is.na(halfbath)) # homes not missing halfbath data
filter(homes, is.na(totalrooms))
filter(homes, esdistrict == "Stone-Robinson" | esdistrict == "Cale")
filter(homes, esdistrict %in% c("Stone-Robinson", "Cale"))
filter(homes, condition %in% c("Poor", "Substandard"))
#look for max last sale price
arrange(homes, totalvalue)
arrange(homes, finsqft)
count(homes, hsdistrict)
count(homes, hsdistrict, condition)
count(homes, fullbath)
west_alb <- homes %>%
filter(hsdistrct == "Western Albemarle") %>%
select(yearbuilt, totalrooms, condition)
west_alb <- homes %>%
filter(hsdistrct = "Western Albemarle") %>%
select(yearbuilt, totalrooms, condition)
distinct(hsdistrict)
west_alb <- homes %>%
filter(hsdistrict == "Western Albemarle") %>%
select(yearbuilt, totalrooms, condition)
summary(homes$totalvalue)
# use mutate to log transform total value into a new numeric column and to compute new logical variable
homes <- homes %>%
mutate(logtotalvalue = log(totalvalue)) %>%
select(logtotalvalue, everything()) #puts new variable first
homes
#you will get an error
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice)) %>%
select(pricier, everything())
homes
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice, na.rm = TRUE)) %>%
select(pricier, everything())
homes
homes_totalbaths <- homes %>%
mutate(total_baths = fullbath + halfbath * 0.5) %>%
filter(total_baths > 4.5) %>%
select(hsdistrict, total_baths)
homes_totalbaths
dir.tree()
fs::dir_tree()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr) # "a consistent set of verbs that help you solve the most common data manipulation challenges"
library(readr) # "a fast and friendly way to read rectangular data"
homes <- read_csv("../data-raw/albemarle_homes_2020.csv")
# inspect the data
homes
# alternative ways to preview the data
# View(homes)
# glimpse(homes)
# str(homes)
# head(homes)
# review columns names
names(homes)
# rename problematic column name
# use this format: new_name = old_name
homes <- rename(homes, hsdistrict = "High School District")
names(homes)
select(homes, totalvalue, yearbuilt, finsqft) # select three variables
select(homes, lotsize:totalvalue) # select variables between lotsize and totval
select(homes, contains("year")) # contains a word
select(homes, ends_with("district")) # ends with a word
homes <- select(homes, totalvalue, esdistrict, finsqft, halfbath, everything(), -condition2)
homes
select(homes, condition, cooling, bedroom)
# get a summary of dataset variables
summary(homes)
# review high school, middle school, and elementary school names
distinct(homes, hsdistrict)
distinct(homes, msdistrict)
distinct(homes, esdistrict)
distinct(homes, condition)
filter(homes, esdistrict == "Stone-Robinson") # Look at Stone-Robinson esdistrict homes only
filter(homes, yearbuilt > 2011) # homes built after 2011
filter(homes, condition %in% c("Poor", "Substandard"))
filter(homes, finsqft < 1000)
filter(homes, is.na(halfbath)) # homes missing halfbath data
filter(homes, !is.na(halfbath)) # homes not missing halfbath data
filter(homes, is.na(totalrooms))
filter(homes, esdistrict == "Stone-Robinson" | esdistrict == "Cale")
filter(homes, esdistrict %in% c("Stone-Robinson", "Cale"))
filter(homes, condition %in% c("Poor", "Substandard"))
#look for max last sale price
arrange(homes, totalvalue)
arrange(homes, desc(totalvalue))
arrange(homes, finsqft)
count(homes, hsdistrict)
count(homes, hsdistrict, condition)
count(homes, fullbath)
monticello <- filter(homes, hsdistrict == "Monticello")
monticello_intermediate <- select(monticello, totalvalue, age)
monticello_nest <- select(filter(homes, hsdistrict == "Monticello"), totalvalue, age)
monticello_pipe <- homes %>%
filter(hsdistrict == "Monticello") %>%
select(totalvalue, age)
west_alb <- homes %>%
filter(hsdistrict == "Western Albemarle") %>%
select(yearbuilt, totalrooms, condition)
summary(homes$totalvalue)
# use mutate to log transform total value into a new numeric column and to compute new logical variable
homes <- homes %>%
mutate(logtotalvalue = log(totalvalue)) %>%
select(logtotalvalue, everything()) #puts new variable first
homes
#you will get an error
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice)) %>%
select(pricier, everything())
homes
homes <- homes %>%
mutate(pricier = lastsaleprice > mean(lastsaleprice, na.rm = TRUE)) %>%
select(pricier, everything())
homes
homes_totalbaths <- homes %>%
mutate(total_baths = fullbath + halfbath * 0.5) %>%
filter(total_baths > 4.5) %>%
select(hsdistrict, total_baths)
homes_totalbaths
homes %>%
group_by(hsdistrict) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE))
# group_by high school district and by condition
homes %>%
group_by(hsdistrict, condition) %>%
summarize(medtotalvalue = median(totalvalue, na.rm = TRUE),
maxtotalvalue = max(totalvalue, na.rm = TRUE)) %>%
arrange(desc(medtotalvalue))
homes %>%
group_by(msdistrict) %>%
summarise(meanbath = mean(fullbath, na.rm = TRUE),
maxbath = max(fullbath, na.rm = TRUE))
dir.create("data-processed")
write_rds(homes, "../data-processed/albemarle_homes_2020_processed.Rds")
dir.create("../data-processed")
write_rds(homes, "../data-processed/albemarle_homes_2020_processed.Rds")
